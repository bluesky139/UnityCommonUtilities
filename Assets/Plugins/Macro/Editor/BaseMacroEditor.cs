using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;
using Macro = common.DevDebug.Macro;

namespace common
{
    public class BaseMacroEditor : Editor
    {
        static bool refreshing = false;

        protected bool OnRefreshing()
        {
            if (EditorApplication.isCompiling || refreshing)
            {
                EditorGUILayout.LabelField("Refreshing, please wait...");
                return true;
            }
            return false;
        }

        public static void RefreshRsp()
	    {
            refreshing = true;
            EditorCoroutine.Start(RefreshRsp_());
        }
        public static IEnumerator RefreshRsp_()
        {
            foreach (string name in rspList)
            {
                string path = "./Assets/" + name + ".rsp";
                while (IsFileLocked(path)) // rsp file may be locked by unity
                {
                    yield return null;
                }
            }

            bool needRefresh = false;
            foreach (string rsp in rspList)
                needRefresh |= GenerateRsp(rsp);
            if (needRefresh)
                RecompileScript();
            refreshing = false;
        }

        static readonly string[] rspList = { "smcs" };
        private static bool GenerateRsp(string name)
        {
            string path = "./Assets/" + name + ".rsp";
            string oldStr = File.Exists(path) ? File.ReadAllText(path) : "";
            string newStr = "-unsafe -define:USE_UNSAFE;";
            foreach (KeyValuePair<string, List<Macro>> kv in DevDebug.instance.macros)
            {
                foreach (Macro macro in kv.Value)
                {
                    if (macro.valid && macro.enabled)
                    {
                        newStr += macro.name + ";";
                    }
                }
            }
            
            if (oldStr != newStr)
            {
                File.WriteAllText(path, newStr);
                Debug.Log("Wrote new defines " + newStr + " to " + path);
                return true; 
            }
            return false;
        }

        static int pos;
        static void WriteString(FileStream stream, string str, bool isNew = false)
        {
            if (isNew)
            {
                pos = 0;
            }
            byte[] bytes = Encoding.UTF8.GetBytes(str);
            stream.Write(bytes, pos, bytes.Length);
        }

        [MenuItem("Common/Macro/Recompile Script", priority = 60)]
        public static void RecompileScript()
        {
            Debug.Log("RecompileScript");
            FileStream stream = File.Create(EditorEnv.dstUnityProjectPlugins + "/Macro/Dev_EmptyForRefresh.cs");
            WriteString(stream, "// Generated by DevDebug.cs " + DateTime.Now.ToString() + "\n", true);
            WriteString(stream, "// Empty file to be modified then recompile script.");
            stream.Flush();
            stream.Close();
            AssetDatabase.Refresh();
        }

        static bool IsFileLocked(string path)
        {
            if (!File.Exists(path))
                return false;

            FileStream stream = null;
            try
            {
                stream = File.Open(path, FileMode.Open, FileAccess.ReadWrite, FileShare.None);
            }
            catch
            {
                return true;
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }
            if (stream == null)
                return true;
            return false;
        }
    }
}
